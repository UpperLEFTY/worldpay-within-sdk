#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Error(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Error')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PricePerUnit:
  """
  Attributes:
   - amount
   - currencyCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'amount', None, None, ), # 1
    (2, TType.STRING, 'currencyCode', None, None, ), # 2
  )

  def __init__(self, amount=None, currencyCode=None,):
    self.amount = amount
    self.currencyCode = currencyCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currencyCode = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PricePerUnit')
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 1)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.currencyCode is not None:
      oprot.writeFieldBegin('currencyCode', TType.STRING, 2)
      oprot.writeString(self.currencyCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.currencyCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Price:
  """
  Attributes:
   - id
   - description
   - pricePerUnit
   - unitId
   - unitDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'description', None, None, ), # 2
    (3, TType.STRUCT, 'pricePerUnit', (PricePerUnit, PricePerUnit.thrift_spec), None, ), # 3
    (4, TType.I32, 'unitId', None, None, ), # 4
    (5, TType.STRING, 'unitDescription', None, None, ), # 5
  )

  def __init__(self, id=None, description=None, pricePerUnit=None, unitId=None, unitDescription=None,):
    self.id = id
    self.description = description
    self.pricePerUnit = pricePerUnit
    self.unitId = unitId
    self.unitDescription = unitDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pricePerUnit = PricePerUnit()
          self.pricePerUnit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.unitId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.unitDescription = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Price')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 2)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.pricePerUnit is not None:
      oprot.writeFieldBegin('pricePerUnit', TType.STRUCT, 3)
      self.pricePerUnit.write(oprot)
      oprot.writeFieldEnd()
    if self.unitId is not None:
      oprot.writeFieldBegin('unitId', TType.I32, 4)
      oprot.writeI32(self.unitId)
      oprot.writeFieldEnd()
    if self.unitDescription is not None:
      oprot.writeFieldBegin('unitDescription', TType.STRING, 5)
      oprot.writeString(self.unitDescription)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.pricePerUnit)
    value = (value * 31) ^ hash(self.unitId)
    value = (value * 31) ^ hash(self.unitDescription)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Service:
  """
  Attributes:
   - id
   - name
   - description
   - prices
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.MAP, 'prices', (TType.I32,None,TType.STRUCT,(Price, Price.thrift_spec)), None, ), # 4
  )

  def __init__(self, id=None, name=None, description=None, prices=None,):
    self.id = id
    self.name = name
    self.description = description
    self.prices = prices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.prices = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32()
            _val6 = Price()
            _val6.read(iprot)
            self.prices[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Service')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.prices is not None:
      oprot.writeFieldBegin('prices', TType.MAP, 4)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.prices))
      for kiter7,viter8 in self.prices.items():
        oprot.writeI32(kiter7)
        viter8.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.prices)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HCECard:
  """
  Attributes:
   - FirstName
   - LastName
   - ExpMonth
   - ExpYear
   - CardNumber
   - Type
   - Cvc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'FirstName', None, None, ), # 1
    (2, TType.STRING, 'LastName', None, None, ), # 2
    (3, TType.I32, 'ExpMonth', None, None, ), # 3
    (4, TType.I32, 'ExpYear', None, None, ), # 4
    (5, TType.STRING, 'CardNumber', None, None, ), # 5
    (6, TType.STRING, 'Type', None, None, ), # 6
    (7, TType.STRING, 'Cvc', None, None, ), # 7
  )

  def __init__(self, FirstName=None, LastName=None, ExpMonth=None, ExpYear=None, CardNumber=None, Type=None, Cvc=None,):
    self.FirstName = FirstName
    self.LastName = LastName
    self.ExpMonth = ExpMonth
    self.ExpYear = ExpYear
    self.CardNumber = CardNumber
    self.Type = Type
    self.Cvc = Cvc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.FirstName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.LastName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ExpMonth = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ExpYear = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.CardNumber = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.Type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.Cvc = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HCECard')
    if self.FirstName is not None:
      oprot.writeFieldBegin('FirstName', TType.STRING, 1)
      oprot.writeString(self.FirstName)
      oprot.writeFieldEnd()
    if self.LastName is not None:
      oprot.writeFieldBegin('LastName', TType.STRING, 2)
      oprot.writeString(self.LastName)
      oprot.writeFieldEnd()
    if self.ExpMonth is not None:
      oprot.writeFieldBegin('ExpMonth', TType.I32, 3)
      oprot.writeI32(self.ExpMonth)
      oprot.writeFieldEnd()
    if self.ExpYear is not None:
      oprot.writeFieldBegin('ExpYear', TType.I32, 4)
      oprot.writeI32(self.ExpYear)
      oprot.writeFieldEnd()
    if self.CardNumber is not None:
      oprot.writeFieldBegin('CardNumber', TType.STRING, 5)
      oprot.writeString(self.CardNumber)
      oprot.writeFieldEnd()
    if self.Type is not None:
      oprot.writeFieldBegin('Type', TType.STRING, 6)
      oprot.writeString(self.Type)
      oprot.writeFieldEnd()
    if self.Cvc is not None:
      oprot.writeFieldBegin('Cvc', TType.STRING, 7)
      oprot.writeString(self.Cvc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.FirstName)
    value = (value * 31) ^ hash(self.LastName)
    value = (value * 31) ^ hash(self.ExpMonth)
    value = (value * 31) ^ hash(self.ExpYear)
    value = (value * 31) ^ hash(self.CardNumber)
    value = (value * 31) ^ hash(self.Type)
    value = (value * 31) ^ hash(self.Cvc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Device:
  """
  Attributes:
   - uid
   - name
   - description
   - services
   - ipv4Address
   - currencyCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.MAP, 'services', (TType.I32,None,TType.STRUCT,(Service, Service.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'ipv4Address', None, None, ), # 5
    (6, TType.STRING, 'currencyCode', None, None, ), # 6
  )

  def __init__(self, uid=None, name=None, description=None, services=None, ipv4Address=None, currencyCode=None,):
    self.uid = uid
    self.name = name
    self.description = description
    self.services = services
    self.ipv4Address = ipv4Address
    self.currencyCode = currencyCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.services = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readI32()
            _val15 = Service()
            _val15.read(iprot)
            self.services[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ipv4Address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.currencyCode = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Device')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.services is not None:
      oprot.writeFieldBegin('services', TType.MAP, 4)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.services))
      for kiter16,viter17 in self.services.items():
        oprot.writeI32(kiter16)
        viter17.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ipv4Address is not None:
      oprot.writeFieldBegin('ipv4Address', TType.STRING, 5)
      oprot.writeString(self.ipv4Address)
      oprot.writeFieldEnd()
    if self.currencyCode is not None:
      oprot.writeFieldBegin('currencyCode', TType.STRING, 6)
      oprot.writeString(self.currencyCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.services)
    value = (value * 31) ^ hash(self.ipv4Address)
    value = (value * 31) ^ hash(self.currencyCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceMessage:
  """
  Attributes:
   - deviceDescription
   - hostname
   - portNumber
   - serverId
   - urlPrefix
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceDescription', None, None, ), # 1
    (2, TType.STRING, 'hostname', None, None, ), # 2
    (3, TType.I32, 'portNumber', None, None, ), # 3
    (4, TType.STRING, 'serverId', None, None, ), # 4
    (5, TType.STRING, 'urlPrefix', None, None, ), # 5
  )

  def __init__(self, deviceDescription=None, hostname=None, portNumber=None, serverId=None, urlPrefix=None,):
    self.deviceDescription = deviceDescription
    self.hostname = hostname
    self.portNumber = portNumber
    self.serverId = serverId
    self.urlPrefix = urlPrefix

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceDescription = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.portNumber = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.serverId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.urlPrefix = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceMessage')
    if self.deviceDescription is not None:
      oprot.writeFieldBegin('deviceDescription', TType.STRING, 1)
      oprot.writeString(self.deviceDescription)
      oprot.writeFieldEnd()
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 2)
      oprot.writeString(self.hostname)
      oprot.writeFieldEnd()
    if self.portNumber is not None:
      oprot.writeFieldBegin('portNumber', TType.I32, 3)
      oprot.writeI32(self.portNumber)
      oprot.writeFieldEnd()
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.STRING, 4)
      oprot.writeString(self.serverId)
      oprot.writeFieldEnd()
    if self.urlPrefix is not None:
      oprot.writeFieldBegin('urlPrefix', TType.STRING, 5)
      oprot.writeString(self.urlPrefix)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.deviceDescription)
    value = (value * 31) ^ hash(self.hostname)
    value = (value * 31) ^ hash(self.portNumber)
    value = (value * 31) ^ hash(self.serverId)
    value = (value * 31) ^ hash(self.urlPrefix)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceDetails:
  """
  Attributes:
   - serviceId
   - serviceDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'serviceId', None, None, ), # 1
    (2, TType.STRING, 'serviceDescription', None, None, ), # 2
  )

  def __init__(self, serviceId=None, serviceDescription=None,):
    self.serviceId = serviceId
    self.serviceDescription = serviceDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.serviceId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serviceDescription = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceDetails')
    if self.serviceId is not None:
      oprot.writeFieldBegin('serviceId', TType.I32, 1)
      oprot.writeI32(self.serviceId)
      oprot.writeFieldEnd()
    if self.serviceDescription is not None:
      oprot.writeFieldBegin('serviceDescription', TType.STRING, 2)
      oprot.writeString(self.serviceDescription)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serviceId)
    value = (value * 31) ^ hash(self.serviceDescription)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TotalPriceResponse:
  """
  Attributes:
   - serverId
   - clientId
   - priceId
   - unitsToSupply
   - totalPrice
   - paymentReferenceId
   - merchantClientKey
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'clientId', None, None, ), # 2
    (3, TType.I32, 'priceId', None, None, ), # 3
    (4, TType.I32, 'unitsToSupply', None, None, ), # 4
    (5, TType.I32, 'totalPrice', None, None, ), # 5
    (6, TType.STRING, 'paymentReferenceId', None, None, ), # 6
    (7, TType.STRING, 'merchantClientKey', None, None, ), # 7
  )

  def __init__(self, serverId=None, clientId=None, priceId=None, unitsToSupply=None, totalPrice=None, paymentReferenceId=None, merchantClientKey=None,):
    self.serverId = serverId
    self.clientId = clientId
    self.priceId = priceId
    self.unitsToSupply = unitsToSupply
    self.totalPrice = totalPrice
    self.paymentReferenceId = paymentReferenceId
    self.merchantClientKey = merchantClientKey

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serverId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.priceId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.unitsToSupply = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.totalPrice = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.paymentReferenceId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.merchantClientKey = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TotalPriceResponse')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.STRING, 1)
      oprot.writeString(self.serverId)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 2)
      oprot.writeString(self.clientId)
      oprot.writeFieldEnd()
    if self.priceId is not None:
      oprot.writeFieldBegin('priceId', TType.I32, 3)
      oprot.writeI32(self.priceId)
      oprot.writeFieldEnd()
    if self.unitsToSupply is not None:
      oprot.writeFieldBegin('unitsToSupply', TType.I32, 4)
      oprot.writeI32(self.unitsToSupply)
      oprot.writeFieldEnd()
    if self.totalPrice is not None:
      oprot.writeFieldBegin('totalPrice', TType.I32, 5)
      oprot.writeI32(self.totalPrice)
      oprot.writeFieldEnd()
    if self.paymentReferenceId is not None:
      oprot.writeFieldBegin('paymentReferenceId', TType.STRING, 6)
      oprot.writeString(self.paymentReferenceId)
      oprot.writeFieldEnd()
    if self.merchantClientKey is not None:
      oprot.writeFieldBegin('merchantClientKey', TType.STRING, 7)
      oprot.writeString(self.merchantClientKey)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serverId)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.priceId)
    value = (value * 31) ^ hash(self.unitsToSupply)
    value = (value * 31) ^ hash(self.totalPrice)
    value = (value * 31) ^ hash(self.paymentReferenceId)
    value = (value * 31) ^ hash(self.merchantClientKey)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceDeliveryToken:
  """
  Attributes:
   - key
   - issued
   - expiry
   - refundOnExpiry
   - signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'issued', None, None, ), # 2
    (3, TType.STRING, 'expiry', None, None, ), # 3
    (4, TType.BOOL, 'refundOnExpiry', None, None, ), # 4
    (5, TType.STRING, 'signature', None, None, ), # 5
  )

  def __init__(self, key=None, issued=None, expiry=None, refundOnExpiry=None, signature=None,):
    self.key = key
    self.issued = issued
    self.expiry = expiry
    self.refundOnExpiry = refundOnExpiry
    self.signature = signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.issued = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expiry = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.refundOnExpiry = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.signature = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceDeliveryToken')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.issued is not None:
      oprot.writeFieldBegin('issued', TType.STRING, 2)
      oprot.writeString(self.issued)
      oprot.writeFieldEnd()
    if self.expiry is not None:
      oprot.writeFieldBegin('expiry', TType.STRING, 3)
      oprot.writeString(self.expiry)
      oprot.writeFieldEnd()
    if self.refundOnExpiry is not None:
      oprot.writeFieldBegin('refundOnExpiry', TType.BOOL, 4)
      oprot.writeBool(self.refundOnExpiry)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 5)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.issued)
    value = (value * 31) ^ hash(self.expiry)
    value = (value * 31) ^ hash(self.refundOnExpiry)
    value = (value * 31) ^ hash(self.signature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PaymentResponse:
  """
  Attributes:
   - serverId
   - clientId
   - totalPaid
   - serviceDeliveryToken
   - ClientUUID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'clientId', None, None, ), # 2
    (3, TType.I32, 'totalPaid', None, None, ), # 3
    (4, TType.STRUCT, 'serviceDeliveryToken', (ServiceDeliveryToken, ServiceDeliveryToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'ClientUUID', None, None, ), # 5
  )

  def __init__(self, serverId=None, clientId=None, totalPaid=None, serviceDeliveryToken=None, ClientUUID=None,):
    self.serverId = serverId
    self.clientId = clientId
    self.totalPaid = totalPaid
    self.serviceDeliveryToken = serviceDeliveryToken
    self.ClientUUID = ClientUUID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serverId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalPaid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.serviceDeliveryToken = ServiceDeliveryToken()
          self.serviceDeliveryToken.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ClientUUID = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PaymentResponse')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.STRING, 1)
      oprot.writeString(self.serverId)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.STRING, 2)
      oprot.writeString(self.clientId)
      oprot.writeFieldEnd()
    if self.totalPaid is not None:
      oprot.writeFieldBegin('totalPaid', TType.I32, 3)
      oprot.writeI32(self.totalPaid)
      oprot.writeFieldEnd()
    if self.serviceDeliveryToken is not None:
      oprot.writeFieldBegin('serviceDeliveryToken', TType.STRUCT, 4)
      self.serviceDeliveryToken.write(oprot)
      oprot.writeFieldEnd()
    if self.ClientUUID is not None:
      oprot.writeFieldBegin('ClientUUID', TType.STRING, 5)
      oprot.writeString(self.ClientUUID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serverId)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.totalPaid)
    value = (value * 31) ^ hash(self.serviceDeliveryToken)
    value = (value * 31) ^ hash(self.ClientUUID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
