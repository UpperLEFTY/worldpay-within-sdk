#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from wpwithin import WPWithin
from wpwithin.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void setup(string name, string description)')
  print('  void addService(Service svc)')
  print('  void removeService(Service svc)')
  print('  void initConsumer(string scheme, string hostname, i32 port, string urlPrefix, string clientID, HCECard hceCard)')
  print('  void initProducer(string merchantClientKey, string merchantServiceKey)')
  print('  Device getDevice()')
  print('  void startServiceBroadcast(i32 timeoutMillis)')
  print('  void stopServiceBroadcast()')
  print('   deviceDiscovery(i32 timeoutMillis)')
  print('   requestServices()')
  print('   getServicePrices(i32 serviceId)')
  print('  TotalPriceResponse selectService(i32 serviceId, i32 numberOfUnits, i32 priceId)')
  print('  PaymentResponse makePayment(TotalPriceResponse request)')
  print('  ServiceDeliveryToken beginServiceDelivery(i32 serviceID, ServiceDeliveryToken serviceDeliveryToken, i32 unitsToSupply)')
  print('  ServiceDeliveryToken endServiceDelivery(i32 serviceID, ServiceDeliveryToken serviceDeliveryToken, i32 unitsReceived)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = WPWithin.Client(protocol)
transport.open()

if cmd == 'setup':
  if len(args) != 2:
    print('setup requires 2 args')
    sys.exit(1)
  pp.pprint(client.setup(args[0],args[1],))

elif cmd == 'addService':
  if len(args) != 1:
    print('addService requires 1 args')
    sys.exit(1)
  pp.pprint(client.addService(eval(args[0]),))

elif cmd == 'removeService':
  if len(args) != 1:
    print('removeService requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeService(eval(args[0]),))

elif cmd == 'initConsumer':
  if len(args) != 6:
    print('initConsumer requires 6 args')
    sys.exit(1)
  pp.pprint(client.initConsumer(args[0],args[1],eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'initProducer':
  if len(args) != 2:
    print('initProducer requires 2 args')
    sys.exit(1)
  pp.pprint(client.initProducer(args[0],args[1],))

elif cmd == 'getDevice':
  if len(args) != 0:
    print('getDevice requires 0 args')
    sys.exit(1)
  pp.pprint(client.getDevice())

elif cmd == 'startServiceBroadcast':
  if len(args) != 1:
    print('startServiceBroadcast requires 1 args')
    sys.exit(1)
  pp.pprint(client.startServiceBroadcast(eval(args[0]),))

elif cmd == 'stopServiceBroadcast':
  if len(args) != 0:
    print('stopServiceBroadcast requires 0 args')
    sys.exit(1)
  pp.pprint(client.stopServiceBroadcast())

elif cmd == 'deviceDiscovery':
  if len(args) != 1:
    print('deviceDiscovery requires 1 args')
    sys.exit(1)
  pp.pprint(client.deviceDiscovery(eval(args[0]),))

elif cmd == 'requestServices':
  if len(args) != 0:
    print('requestServices requires 0 args')
    sys.exit(1)
  pp.pprint(client.requestServices())

elif cmd == 'getServicePrices':
  if len(args) != 1:
    print('getServicePrices requires 1 args')
    sys.exit(1)
  pp.pprint(client.getServicePrices(eval(args[0]),))

elif cmd == 'selectService':
  if len(args) != 3:
    print('selectService requires 3 args')
    sys.exit(1)
  pp.pprint(client.selectService(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'makePayment':
  if len(args) != 1:
    print('makePayment requires 1 args')
    sys.exit(1)
  pp.pprint(client.makePayment(eval(args[0]),))

elif cmd == 'beginServiceDelivery':
  if len(args) != 3:
    print('beginServiceDelivery requires 3 args')
    sys.exit(1)
  pp.pprint(client.beginServiceDelivery(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'endServiceDelivery':
  if len(args) != 3:
    print('endServiceDelivery requires 3 args')
    sys.exit(1)
  pp.pprint(client.endServiceDelivery(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
